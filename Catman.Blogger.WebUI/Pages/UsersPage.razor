@page "/users"

@using Catman.Blogger.Core.Services.User.Data.Requests
@using Catman.Blogger.WebUI.Data.User
@using Catman.Blogger.WebUI.Shared.Common

@inject IUserStorage _storage;

<h1>Users</h1>

<Loadable IsLoaded="@_storage.Users.IsLoaded">
    @if (!_storage.Users.Value.Any())
    {
        <p>There are no users yet. Try registering one!</p>
    }
    
    @foreach (var user in _storage.Users.Value)
    {
        <div class="card my-3">
            <div class="card-body">
                <h5 class="card-title">@user.Username</h5>
                <h6 class="card-subtitle text-muted">@user.Id</h6>
                
                <p class="card-text">@user.DisplayName</p>
                
                <div class="d-flex justify-content-end">
                    <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => _storage.DeleteUser(user.Id))">
                        @if (_storage.DeletingUser && user.Id == _storage.UserIdToDelete)
                        {
                            <span class="spinner-border spinner-border-sm"></span>
                        }
                        Delete
                    </button>
                </div>
            </div>
        </div>
    }
</Loadable>

<EditForm Model="@_userToRegister" OnValidSubmit="@(() => _storage.RegisterUser(_userToRegister))">
    <div class="mb-3">
        <label class="form-label">
            Username
            <InputText @bind-Value="@_userToRegister.Username" class="form-control" />
        </label>
    </div>
    
    <div class="mb-3">
        <label class="form-label">
            Password
            <InputText @bind-Value="@_userToRegister.Password" class="form-control" />
        </label>
    </div>
    
    <div class="mb-3">
        <label class="form-label">
            Display name
            <InputText @bind-Value="@_userToRegister.DisplayName" class="form-control" />
        </label>
    </div>
    
    <button type="submit" class="btn btn-primary">
        @if (_storage.RegisteringUser)
        {
            <span class="spinner-border spinner-border-sm"></span>
        }
        Register user
    </button>
</EditForm>

@code
{
    private readonly RegisterUser _userToRegister = new RegisterUser();

    protected override async Task OnInitializedAsync()
    {
        _storage.OnChange += StateHasChanged;
        await _storage.Initialize();
    }

    public void Dispose()
    {
        _storage.OnChange -= StateHasChanged;
    }
}
